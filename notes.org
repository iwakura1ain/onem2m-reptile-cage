* 회의 
** 프로젝트 가이드라인 (tr0025 application development guideline)
**** problem case
하나의 스토리가 나와야함
**** 사용되는 하이레벨 아키텍쳐 
**** result -> 제공되는 기능들
(eg. device discovery, device registration, device control)
**** use case description 
**** diagram of final result architecture  

** 센서 
*** 온도 

*** 습도 

*** 불빛 (led)

*** 카메라 

*** 모션센서 

*** 스피커 

** 추가기능 

*** 디바이스 디스커버리 

*** 디바이스 등록 

*** 대쉬보드 

*** 아크릴 케이지 

*** 파충류 사용해서 시현 

*** 파충류 종에 따른 요구사항
(같은 종에 따라 한꺼번에 컨트롤)

* 발표
** 주제
*스마트 렙틸 케이지*

** 팀원 소개
- *해커톤 참여 안함* 

** 배경 (왜 선택했는지)
- 파충류 마켓에 대한 수요 증가, 고가의 파충류 많음 -> 이러한 고가의 동물들을 기르는데 다양한 툴과 시스템 들이 필요
- 큰 개념으로 보았을 때 동물원이나 식물원, 그리고 애완동물 매장에서 사용 가능한 모니터링 시스템 만들고 싶었음 

- 종에 따른 다양한 사육조건
- 파충류 기르는 것에 대한 접근장벽 낮추기
  
** 해결하기 위한 중요 기능 
- 온도, 습도, 조도 대한 정보
- 파충류를 기를 수 있는 케이지
- 케이지에 대한 데이터를 볼수 있는 대쉬보드
- 케이지에 대한 데이터를 저장하고 이러한 데이터 따라 컨트롤 할 수 있는 서버 

** 요구되는 센서 (계획에 정해진 것)
*** 온도 센서

*** 습도 센서 

*** led

*** 조도 센서 

*** 카메라 

** 요구되는 추가기능
*** 온도 제어
: 라이트 사용

*** 습도 제어
: 소형 가습기 사용? 

*** 케이지
: 실제로 사용되는 케이지 등을 바탕으로 만들 예정 

** onem2m
*** oneM2M 프레임워크 mobius 사용 이유
- 한글로 된 도큐멘테이션 많음 
- 파충류 종에 따른 개별적 데이터를 제공해야함
- 파충류 매장 / 동물원 같은 환경을 기준으로 여러개의 케이지에 대한 정보가 한꺼번에 관리 되어야함 

*** IOT 기기  라즈베리 사용 이유
- 라즈베리 파이에서 제공되는 센서





*** 피드백 
- 사용하는 센서랑 케이지랑 대쉬보드가 서로 잘 작독하는 구상도 있었으면 좋음 

* 기기
:수령일자: <2022-10-21 Fri>
: 10월 말 필요한 센서 목록 제출, 링크 제출
: 블랙보드 센서 링크 참고 
- 라즈베리 파이
- T자형 GPIO 확장 키트
- 소켓 점퍼 케이블 x3
- 브레드보드
- 아드웨노 LED 모듈
- 서브모터
- 광조도, 진동, 인체감지센서(smg-a, hc-sr501), 수위센서, 탁도, 초음파 센서
- 아드위노 버튼 

* 구현 
** 클라우드 중점 둬야함
: 센서 <-(데이터, 프로토콜)-> 클라우드 <-(데이터, 프로토콜)-> 대쉬보드 

** 디바이스 등록
: 서버가 디바이스에 대한 정보 갖고 있음 -> 서버가 디바이스에게 등록 요청 -> 디바이스가 등록
: 디바이스가 서버에 대한 정보 갖고 있음 -> 디바이스가 서버에 등록 요청 -> 디바이스가 등록

** onem2m
: 데이터의 저장 방식, 데이터 attribute 에 대한 정의임
*** 데이터 저장 : container(data category) -> content instance(data values)
  : 최근 것만 갖고 싶다 -> latest url에 요청 
  : 날짜 해당하는 것만 갖고 싶다 -> date url에 요청
  : 특정 데이터 해당하는 주소(ID)에 대해 요청 -> 데이터 갖고옴 
*** ID
: 전체 엔티티는 각각 고유 ID 갖고 있어야 함
- cse 안 리소스별로 id
- ae / cse 는 각각 id
*** common scheme
: originator <-> receiver 
*** addressing scheme
: home > room > temp | humidity > date > data
: 또는 unhierarchical 방식으로 저장할 수 있음
*** request params
- from
- to
- operation (crud)
- request identifier
- content
- resource type
- response type
- timestamps
- filter criteria: 데이터 필터링 기능에서 사용
*** response param
- response status code
*** csf function
: 서버에서 제공하는 common functions
- 센서/액츄웨이터 등록
- 디스커버리 기능
- 데이터 매니지먼트 (crud operations)
- group 매니지먼트
- location 매니지먼트
- subscription notification (리소스 섭스크립션 등)
- security
- network service exposure
- service charging / accounting / payment
*** discovery
- ie. resource retrieve
- child / descendent / sub-resource resource 까지 discovery 할지
*** communication modes
- request handling (request/response)
- non blocking / async requests
- non blocking / sync requests 
*** registration
: ae에 해당하는 컨테이너가 생성된다는 것
: ae는 전에 설정된 cse에게 registration 요청
- ae registration: security credentials + ae ID(또는 설정된 serial number) -registration request-> cse 
- cse registration(서버들 간에도 등록함): cse ID(항상 존재) -registration request->in-cse
*** data management
- container 기반
  : container 안 sub-container 존재 가능 
- metadata도 저장
- container 안에 content instance(실제 data)
- latest / oldest / crud / cld  api 기능
- flexcontainer: 사용자가 customize 가능한 컨테이너
- timeSeries / timeSeriesInstance: 시간 관리 
*** access control policy
: who + what + how -> 권한
- acp 프로필 만듬 -> ae에게 acp 프로필 적용 
*** group resource container
: ae를 그룹별로 관리, 그룹 멤버 단위 function 있음 (fan out)
*** subscription
: subscribe 한 리소스에 대한 notification 
*** announcement
- 한 cse가 다른 cse 의 데이터를 사용 가능 

* 초청강의
** mobius 
: 사물인터넷 플랫폼
** 리소스 브라우저 
: ae 이름 앞에 S 붙히기
- iotketi 주소
  : http://203.253.128.161:7575/Mobius/{{ae}}
** 대쉬보드
- 오픈소스 freeboard 
** oneM2M webapp
- 

* oneM2M API
** registration


